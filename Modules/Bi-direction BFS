public class Solution {
    /**
    * 630. Knight Shortest Path II
    * https://www.lintcode.com/problem/knight-shortest-path-ii/description
    * pro: 求马在棋盘上到目标点的最短距离
    * tag: BFS
    * sol: 双向bfs, 注意这里的马只能往左下走, 所以双向需要调整自己的走向
    *       双向bfs, 最后一定是同时在终点结束的
    * mis:  从终点出发没有调整方向, 每次都没动....
    * fol:
    * oth:
    */
    /**
     * @param grid: a chessboard included 0 and 1
     * @return: the shortest path
     */
    public int shortestPath2(boolean[][] grid) {
        // write your code here
        if (grid == null || grid.length == 0){
            return -1;
        }
        int row = grid.length;
        int col = grid[0].length;
        if (grid[0][0] || grid[row - 1][col - 1]){
            //System.out.println("?");
            return -1;
        }
        //System.out.println("?" + ((row - 1) * col + (col - 1)));
        Queue<Integer> queueStart = new LinkedList<>();
        HashSet<Integer> setStart = new HashSet<>();
        Queue<Integer> queueEnd = new LinkedList<>();
        HashSet<Integer> setEnd = new HashSet<>();
        // 最优
        int distance = 0;
        queueStart.offer(0);
        // x * col + y
        queueEnd.offer((row - 1) * col + (col - 1));
        setStart.add(0);
        setEnd.add((row - 1) * col + (col - 1));
        // 空就是两边都在最远距离
        while (!queueStart.isEmpty() || !queueEnd.isEmpty()){
            int sizeStart = queueStart.size();
            // if (sizeStart > 0){
            //     distance++;
            // }
            distance++;
            for (int i = 0; i < sizeStart; i++){
                Integer cur = queueStart.poll();
                
                // setStart.add(cur); 放在这里会导致太多没用的节点被加在queue后面
                
                
                List<Integer> neighbours = getNeighbour(cur, grid);
                for (Integer neigh : neighbours){
                    if (setStart.contains(neigh)){
                        continue;
                    }
                    if (setEnd.contains(neigh)){
                    //System.out.println("final start" + (cur / col) + " ---- " + (cur % col));
                        return distance;
                    }
                    //System.out.println("start " + (neigh / col) + " ---- " + (neigh % col));
                    //System.out.println(distance);
                    setStart.add(neigh); 
                    queueStart.offer(neigh);
                }
            }
            
            int sizeEnd = queueEnd.size();
            // if (sizeEnd > 0){
            //     distance++;
            // }
            distance++;
            for (int i = 0; i < sizeEnd; i++){
                Integer cur = queueEnd.poll();
                
               
                List<Integer> neighbours = getNeighbourB(cur, grid);
                for (Integer neigh : neighbours){
                    if (setEnd.contains(neigh)){
                        continue;
                    }
                    if (setStart.contains(neigh)){
                    //System.out.println("final " + (cur / col) + " ---- " + (cur % col));
                        return distance;
                    }
                    
                    // System.out.println("end " + (neigh / col) + " ---- " + (neigh % col));
                    // System.out.println(distance);
                    queueEnd.offer(neigh);
                    setEnd.add(neigh);
                }
            }
        }
        return -1;
    }
    
    private List<Integer> getNeighbour(int cur, boolean[][] grid){
        
        List<Integer> ans = new ArrayList<>();
        int[] dx = {1, -1, 2, -2};
        int[] dy = {2, 2, 1, 1};
        
        int m = grid.length;
        int n = grid[0].length;
        
        for (int i = 0; i < 4; i++){
            int x = cur / n + dx[i];
            int y = cur % n + dy[i];
            
            if (x < 0 || x >= m || y < 0 || y >= n){
                continue;
            }
            if (grid[x][y]){
                continue;
            }
            ans.add(x * n + y);
        }
        
        return ans;
    }
    private List<Integer> getNeighbourB(int cur, boolean[][] grid){
        
        List<Integer> ans = new ArrayList<>();
        int[] dx = {-1, 1, -2, 2};
        int[] dy = {-2, -2, -1, -1};
        
        int m = grid.length;
        int n = grid[0].length;
        
        for (int i = 0; i < 4; i++){
            int x = cur / n + dx[i];
            int y = cur % n + dy[i];
            
            if (x < 0 || x >= m || y < 0 || y >= n){
                continue;
            }
            if (grid[x][y]){
                continue;
            }
            ans.add(x * n + y);
        }
        
        return ans;
    }
}
