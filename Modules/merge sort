public class Solution {
    /**
     * 归并排序
     * @param A: an integer array
     * @return: nothing
     */
     // 只开一个buffer的实现
    public void sortIntegers(int[] A) {
        // write your code here
        if (A == null || A.length == 0){
            return;
        }
        // 只开一个数组，来回倒
        mergeSort(A, 0, A.length - 1, new int[A.length]);
    }
    private void mergeSort(int[] A, int start, int end, int[] buffer){
        if (start >= end){
            return;
        }
        
        int mid = (start + end) / 2;
        // 排序
        mergeSort(A, start, mid, buffer);
        mergeSort(A, mid + 1, end, buffer);
        // 归并
        merge(A, start, mid, mid + 1, end, buffer);
    }
    private void merge(int[] A, int start_a, int end_a, int start_b,int end_b, int[] buffer){
        // merge
        // 经典的合并两个序列
        int start = start_a;
        int k = start;
        while (start_a <= end_a && start_b <= end_b){
            if (A[start_a] > A[start_b]){
                buffer[k++] = A[start_b++];
            } else {
                buffer[k++] = A[start_a++];
            }
        }
        
        while (start_a <= end_a){
            buffer[k++] = A[start_a++];
        }
        
        while (start_b <= end_b){
            buffer[k++] = A[start_b++];
        }
        // copy， 复制
        for (int i = start; i <= end_b; i++){
            A[i] = buffer[i]; 
        }
    }
}
// 开n个buffer的实现， 其实已经到了n^2的space了

public class Solution {
    /**
     * @param A: an integer array
     * @return: nothing
     */
    public void sortIntegers(int[] A) {
        // write your code here
        if (A == null || A.length == 0){
            return;
        }
        // 经典错误
        A = mergeSort(A, 0, A.length - 1);
    }
    private int[] mergeSort(int[] A, int start, int end){
        if (start > end){
            return new int[0];
        }
        if (start == end){
            int[] sorted = new int[1];
            sorted[0] = A[start]; 
            return sorted;
        }
        int mid = (start + end) / 2;
        int[] left = mergeSort(A, start, mid);
        int[] right = mergeSort(A, mid + 1, end);
        
        return merge(left, right);
    }
    
    private int[] merge(int[] left, int[] right){
        int[] ans = new int[left.length + right.length];
        
        int i = 0;
        int j = 0;
        int k = 0;
        while (i < left.length && j < right.length){
            if (left[i] <= right[j]){
                ans[k++] = left[i++];
            } else {
                ans[k++] = right[j++];
            }
        }
        for (int m = i; m < left.length; m++){
            ans[k++] = left[i++];
        }
         for (int m = j; m < right.length; m++){
            ans[k++] = right[j++];
        }
        
        for (int m = 0; m < ans.length; m++){
            System.out.print(ans[m] + " ");
        }
        System.out.println("?");
        return ans;
    }
}
