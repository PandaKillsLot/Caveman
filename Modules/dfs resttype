/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
/**
* 94. Binary Tree Maximum Path Sum
* http://lintcode.com/problem/binary-tree-maximum-path-sum/description
* pro: 求二叉树最大和大path
* tag: dfs tree
* sol: path总是有两种, 1 是来自单边 + node 2.来自node的两边加自己 3.来自node下面的子节点的通路
*      分治, 查户口记录单边最大路径, 最大值
* mis:  
* fol:
* oth:
*/
public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: An integer.
     */
    private class Result{
        int singlePath;
        int maxPath;
        public Result(int singlePath, int maxPath){
            this.singlePath = singlePath;
            this.maxPath = maxPath;
        }
    }
    public int maxPathSum(TreeNode root) {
        // write your code here
        if (root == null){
           return 0;
        }
        Result result = helper(root);
        return result.maxPath;
    }
    private Result helper (TreeNode root){
        if (root == null){
            return new Result(0, Integer.MIN_VALUE);
        }
        //divide
        Result left = helper(root.left);
        Result right = helper(root.right);
        //conquer
        int single = Math.max(left.singlePath,right.singlePath) + root.val;
        // to check whether single path is worth adding,if not , simply ignore that
        single = Math.max(single, 0);
        
        int max = Math.max(left.maxPath,right.maxPath);
        max = Math.max(max, left.singlePath + right.singlePath + root.val);
        
        return new Result(single, max);
    }
}
