/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: Preorder in ArrayList which contains node values.
     */
    public ArrayList<Integer> preorderTraversalI(TreeNode root) {
        ArrayList<Integer> order = new ArrayList<Integer>();
        if (root == null) {
            return order;
        }
        traverse(root, order);
        return order;
    }
    private void traverse(TreeNode root, ArrayList<Integer> order){
        // 递归退出条件
        if (root == null) {
            return;
        }
        // 根左右（本身也是递归）--》 根，左子树的左子树。。。。。，右子树的右子树
        order.add(root.val);// 只有作为根的时候才会被加进去
        traverse(root.left, order);
        traverse(root.right, order);
        // 递归三要素 1. 结束条件：递归的底，最简单情况是哪里
        //            2. 前进条件（前进顺序），按什么方式往下递归
        //            3. 操作： 这一步要干什么
    }
    
    public ArrayList<Integer> preorderTraversal(TreeNode root) {
        ArrayList<Integer> ans = new ArrayList<Integer>();
        
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.push(root);
        
        while (!stack.isEmpty()) {
            TreeNode node = stack.pop();
            if (node == null) {
                break;
            }
            ans.add(node.val);
            // stack FILO
           
            // mistake!!!!
            if (node.right != null) {
                stack.push(node.right);
            }
            if (node.left != null) {
                stack.push(node.left);
            }
        }
        return ans;
        
    }
    
}
