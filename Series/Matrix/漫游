/**
* Spiral Matrix
* https://leetcode.com/problems/spiral-matrix/description/
* pro: 把一格矩阵顺时针从内到外打印出来
* tag: simulate 模拟操作
* sol: 其实是模拟的指针走路方式
       主要构成有:
       1) cur 指针
       2) direction
       3) 边界/ 步数
       
       这道题原来的解法比较神奇, 其实省略了cur指针.
       使用了上下左右四个指针来像车床一样打印步数, 其实是比较取巧的方式
       
       新的解法重用了 cur, direc, 步数, 三个基本要素. 边界标0
       并且在方向用了优化, 节省了代码.
       
       
       
* mis: 没有及时在倒车位置倒车, 会导致元素是0的时候加不上去
* fol:Spiral Matrix II
* oth:
*/


class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> ans = new ArrayList<Integer>();
        if (matrix == null || matrix.length == 0) {
            return ans;
        }
        if (matrix[0] == null || matrix[0].length == 0) {
            return ans;
        }
        int[] dx = {0, 1, 0, -1};
        int[] dy = {1, 0, -1, 0};
        int d = 0;
        int x = 0;
        int y = 0;
        int limit = matrix.length * matrix[0].length;
        
       
       while (ans.size() < limit) {
           //if (matrix[x][y] != Integer.Max_VALUE){
               ans.add(matrix[x][y]);
           //}
           
           matrix[x][y] = 0;
           
           x += dx[d];
           y += dy[d];
           
           if (!isValid(x, y, matrix)){
               // 在这里倒车, 而不是交给最上面
               x -= dx[d];
               y -= dy[d];
               d = (d + 1) % 4;
               x += dx[d];
               y += dy[d];
           }
        }
        return ans;
    }
    private boolean isValid(int r, int c, int[][] matrix){
        return r >= 0 && r < matrix.length && c >= 0 && c < matrix[0].length && matrix[r][c] != 0;   
    }
    
    
    
    
    public List<Integer> spiralOrderI(int[][] matrix) {
        List<Integer> ans = new ArrayList<Integer>();
        if (matrix == null || matrix.length == 0) {
            return ans;
        }
        if (matrix[0] == null || matrix[0].length == 0) {
            return ans;
        }
        // matrix[第几行][第几列]
        int rowBegin = 0;
        int rowEnd = matrix.length - 1;
        int colBegin = 0; 
        int colEnd = matrix[0].length - 1;
       
        while (rowBegin <= rowEnd && colBegin <= colEnd) {
            // traver left to right
            for (int i = colBegin; i <= colEnd; i++) {
                ans.add(matrix[rowBegin][i]);
            }
            rowBegin++;
           
            for (int i = rowBegin; i <= rowEnd; i++) {
                ans.add(matrix[i][colEnd]);
            }
            colEnd--;
            
            // traver left to right
            if (rowBegin <= rowEnd) {
                for (int i = colEnd; i >= colBegin; i--) {
                    ans.add(matrix[rowEnd][i]);
                }
            }
            rowEnd--;
             // traver bottom to top
            if (colBegin <= colEnd) {
                for (int j = rowEnd; j >= rowBegin; j --) {
                    ans.add(matrix[j][colBegin]);
                }
            }
             colBegin++;
        }
        return ans;
    }
}
