public class Solution {
    /**
     * 539. Move Zeroes
     * https://www.lintcode.com/problem/move-zeroes/description
     * pro: 一个数组，把0都挪到后面去
     * tag: two pointer
     * solution:双指针，一个指针在前面控制非0的位数，一个指针遍历扫一遍。
     * mis:
     * follow:
     * 1.怎么保证相对顺序？通向双指针
     *   
     * 2.怎么确保读取次数最少->（相向双指针）后面的数字和0互换后不被0覆盖
     * 因为写成0后还可能被后面的数字覆盖，所以只在最后，把非0指针后面的数，全部用0
     * 覆盖
     * @param nums: an integer array
     * @return: nothing
     */
    public void moveZeroes(int[] nums) {
        // write your code here
        if (nums == null || nums.length == 0) {
            return;
        }
        int head = 0;
        int tail = nums.length;
        
        // 这么做是维持了相对顺序的，
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
                nums[head] = nums[i];
                head++;
            } else {
                tail--;
            }
        }
        
        for (int i = tail; i < nums.length; i++) {
            nums[i] = 0;
        }
    }
}
