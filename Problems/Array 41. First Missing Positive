class Solution {
    /**
     * 41. First Missing Positive
     * https://leetcode.com/problems/first-missing-positive/description/
     * pro: 一个数组有正有负,求不在里面的最小正数
     * tag: Array, 双序列匹配
     * sol: swap 解法, 这里另外两种涂的方式都受限制
     * mis: 从没有排序的地方swap回来,必须要i--,原地顿一下
     * fol:
     * oth:双序列 array 对比系列之一
     */
    public int firstMissingPositive(int[] nums) {
        if (nums == null || nums.length == 0){
            return 1;
        }
        int n = nums.length;
        for (int i = 0; i < n; i++){
            // 无法swap
            if (nums[i] <= 0 || nums[i] > n){
                continue;
            }
            
            // 这个排序的核心不是见一个排一个,而是见到了错位才swap
            // nums[0] = 1
            // 实际值:          期望值 : 当前的 i + 1 !! 这个也很难哦
            if (nums[nums[i] - 1] == nums[i]){
                continue;
            } 
            //System.out.println("??? i " + i + "  jjj  " + (nums[i] - 1));
            swap (nums, i, nums[i] - 1);
            // so important
            i--;
        }
        // for (int i = 0; i < n; i++){
        //     System.out.println(nums[i]);
        // }
        for (int i = 0; i < n; i++){
            if(nums[i] != i + 1){
                return i + 1;
            }
        }
        return n + 1;
    }
    private void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
