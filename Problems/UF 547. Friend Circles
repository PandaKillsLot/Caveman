class Solution {
   /**
    *547. Friend Circles
    *https://leetcode.com/problems/friend-circles/submissions/1
    *pro:uf
    *tag:uf
    *sol: uf
    *mis:忘记初始化
    *fol
    *
    */
    class UF{
        int[] father;
        int individual;
        
        public UF(int k){
            this.individual = k;
            this.father = new int[k];
            for (int i = 0; i < k; i++){
                father[i] = i;
            }
        }
        public int find(int a){
            if (father[a] == a){
                return a;
            }
            father[a] = find(father[a]);
            return father[a];
        }
        public void union(int a, int b){
            
            int rootA = find(a);
            int rootB = find(b);
            
//             System.out.println("a " + a);
//             System.out.println("b " + b);
            
//             System.out.println("roota " + rootA);
//             System.out.println("rootb " + rootB);
            
            
            
            if (rootA != rootB){
                father[rootA] = rootB;
                // System.out.println(a);
                // System.out.println(b);
                this.individual--;
            }
        }
    }
    public int findCircleNum(int[][] M) {
        if (M == null || M.length == 0){
            return 0;
        }        
        UF uf = new UF(M.length);
        for (int i = 0; i < M.length; i++){
           for (int j = 0; j < M[0].length; j++){
               if (M[i][j] == 1){
                   uf.union(i, j);
               }
           }
        }
        return uf.individual;
    }
}













