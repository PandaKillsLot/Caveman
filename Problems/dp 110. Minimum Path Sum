public class Solution {
    /**
     * @param grid: a list of lists of integers
     * @return: An integer, minimizes the sum of all numbers along its path
     */
     /**
* 110. Minimum Path Sum
* https://www.lintcode.com/problem/minimum-path-sum/description
* pro: 从上走到下最短几步
* tag: dp 
* sol: 
*      ① dp[i][j] = status grid[i][j] the mininum path from left top to right
*      ② dp[i][j] = rid[i][j] = Min(left, top) + self
*      ③ 初始化: grid[0][j], grid[0][j]
*      ④ 计算顺序:n
* 
*      Space O()
*      Time  O()
* 
* mis:  
* fol:
* oth:
*/
    public int minPathSum(int[][] grid) {
        int row = grid.length;
        int col = grid[0].length; 
        int[][] ans = new int[row][col];
        
        
        ans[0][0] = grid[0][0];
        for(int i = 1; i < col; i++) {
            ans[0][i] = ans[0][i - 1] + grid[0][i];
        }
        
        for(int i = 1; i < row; i++) {
            ans[i][0] = ans[i - 1][0] + grid[i][0];
        }
        
        for(int i = 1; i < row; i++) {
             for(int j = 1;j < col; j++) {
                ans[i][j] = Math.min(ans[i - 1][j], ans[i][j - 1]) + grid[i][j];         
             }
        }
        
        return ans[row - 1][col - 1];
    }
}
