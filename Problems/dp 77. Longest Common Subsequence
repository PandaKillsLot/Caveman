public class Solution {
    /**
     * @param A: A string
     * @param B: A string
     * @return: The length of longest common subsequence of A and B
     */
    // 
/**
* 77. Longest Common Subsequence
* https://www.lintcode.com/problem/longest-common-subsequence/description
* pro: 问两个String的最长子序列 & 打印路径
* tag: dp 双序列
* sol: 二维数组双序列
*      ① dp[i][j] = 以A的前i和B的j个字符最长LCS
*                              B最后一个不在里面   A最后一个不在里面    两个字母都在而且相等
*      ② dp[i][j] = dp[i][j] = Max{dp[i][j - 1] , dp[i - 1][j] , dp[i - 1][j - 1] + 1--> A[i] = B[j]}
*      ③ 初始化: dp[0][0] 是0
*      ④ 计算顺序: n
* 
*      Space O(mn)
*      Time  O(mn)
* 
*      打印路径:
*       ① pi[][]来记录路径(每次只有1才是make sense的)
*       ② pi根据dp[i][j]取值来变成 0,1,2
*       ③ path, 从 pi的最后一步开始推到前面
*       ④ 把path倒着打印一遍
* mis:  
* fol:
* oth:
*/

    public int longestCommonSubsequenceI(String A, String B) {
        // write your code here
        if (A == null || B == null){
            return 0;
        }
        int lenA = A.length();
        int lenB = B.length();
        int[][] dp = new int[lenA + 1][lenA + 1];
        int[][] pi = new int[lenA + 1][lenA + 1];
        // dp[][]是A到i, B到j之后的最长子串长度???
        for (int i = 1; i <= lenA; i++){
            for (int j = 1; j <= lenB; j++){
                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                if (dp[i][j] == dp[i - 1][j]){
                    pi[i][j] = 0;
                } else{
                    pi[i][j] = 1;
                }
                if(A.charAt(i - 1) == B.charAt(j - 1)){
                    // 你是在前面的子串上加一, 而不是一定加一, 说不定你前面的加1和当前的不算是一样的
                    // aac
                    // aa
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                    pi[i][j] = 2;
                }
            }
        }
        char[] res = new char[dp[lenA][lenB]];
        int i = lenA;
        int j = lenB;
        int p = dp[lenA][lenB] - 1;
        // 因为字符在0以上
        while (i > 0 && j > 0){
            if (pi[i][j] == 2){
                res[p] = A.charAt(i - 1);// 只在相同的地方加
                i--;
                j--;
                p--;
            } else if (pi[i][j] == 1){
               //res[p] = A.charAt(i - 1);
               j--;
               //p--;
            } else {
               //res[p] = A.charAt(i - 1);
               i--;
               //p--; 
            }
        }
        System.out.println("The result is ");
        for (i = 0; i < res.length; i++){
            System.out.print(" " + res[i]);
        }
        
        
        return dp[lenA][lenB];
    }
}
