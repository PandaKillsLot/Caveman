/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

/**
* 595. Binary Tree Longest Consecutive Sequence
* https://www.lintcode.com/problem/binary-tree-longest-consecutive-sequence/description
* pro: 问bt的最长连续路径
* tag: dfs tree
* sol: 分治和遍历都行, valid就加一
* mis:  
* fol:
* oth:
*/
public class Solution {
    /**
     * @param root: the root of binary tree
     * @return: the length of the longest consecutive sequence path
     */
     
    // 这个解法有点帅, traverse到底, 然后得到最后的最大值了, 不是直接比较, 而是返回最大值
    public int longestConsecutive(TreeNode root) {
        return helper(root, null, 0);
    }
    
    private int helper(TreeNode root, TreeNode parent, int lengthWithoutRoot) {
        if (root == null) {
            return 0;
        }
        
        int length = (parent != null && parent.val + 1 == root.val)
            ? lengthWithoutRoot + 1
            : 1;
        int left = helper(root.left, root, length);
        int right = helper(root.right, root, length);
        return Math.max(length, Math.max(left, right));
    }
    int max = 0;
    public int longestConsecutiveII(TreeNode root) {
        helper(root);
        return max;
    }
    public int helper(TreeNode root) {
        // write your code here
        if (root == null){
            return 0;
        }
        int left = helper(root.left);
        int right = helper(root.right);
        int ans = 1;
        
        if (left != 0 && root.left.val == root.val + 1) {
            ans = Math.max(ans, left + 1);
        }
        if (right != 0 && root.right.val == root.val + 1) {
            ans = Math.max(ans, right + 1);
        }
        max = Math.max(max, ans);
        //System.out.println("root " + root.val + " left " + left + " right " + right + " ans " + ans);
        return ans;
    }
    
    int ans = 1;
    public int longestConsecutiveI(TreeNode root) {
        // write your code here
        dfs(root, 1);
        return ans;
    }
    private void dfs(TreeNode root, int len){
        if (root == null){
            return;
        }
        if (root.left != null){
            if (root.val + 1 == root.left.val){
                ans = Math.max(ans, len + 1);
                dfs(root.left, len + 1);
            } else {
                dfs(root.left, 1);
            }
        } 
        if (root.right != null){
            if (root.val + 1 == root.right.val){
                ans = Math.max(ans, len + 1);
                dfs(root.right, len + 1);
            } else {
                dfs(root.right, 1);
            }   
        }
        
    }
}
