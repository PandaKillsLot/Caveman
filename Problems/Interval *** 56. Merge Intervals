/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
/**
* 56. Merge Intervals
* https://leetcode.com/problems/merge-intervals/description/
* pro:合并区间
* tag: intervals(算一个特殊的类别吧)
* sol: interval按start排序然后一个个合并
* mis: 
* fol:
* oth:
*/
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        List<Interval> result = new ArrayList<Interval>();
        // 具体的返回什么要和面试官沟通    
        if (intervals == null || intervals.size() == 0) {
            return result;
        }
        // ! 仔细思考自己思路的先决条件，有没有什么特殊的情况
        Collections.sort(intervals, new Comparator<Interval>(){
            @Override
            public int compare(Interval o1, Interval o2){
                return o1.start - o2.start;
            }
        });
        
        
        for (int i = 0; i < intervals.size(); i++){
            Interval temp = intervals.get(i);
            if (result.size() == 0) {
                int index = i;
                while (index < intervals.size() && intervals.get(index).start<= temp.end){
                    temp.end = Math.max(intervals.get(index).end, temp.end);
                    index++;
                }
                result.add(temp);
            }
            if (result.size() != 0 && intervals.get(i).start > result.get(result.size() - 1).end) {
                int index = i + 1;
                while (index < intervals.size() && intervals.get(index).start<= temp.end){
                    // ! 只有大于边界的情况才会变
                    temp.end = Math.max(intervals.get(index).end, temp.end);
                    index++;
                }
                result.add(temp);
            }
        }
        return result;
    }
}
