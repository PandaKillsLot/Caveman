/**
* Sum of Subarray 
* Linkedin OA
* pro: 求一个array所有连续subsarray的和
* tag: array, Math
* sol: 要么prefix sum后枚举起点终点, 要么就数学方法算每个数字能出现几次 
*  Math, O(n) 一个数字的出现次数 = (A[i]在中间) (A[i]只在右边) (A[i]只在左边) (A[i]哪边都不在) * 自己的值
* mis:  
* fol:
* oth:
*/

class Solution {
    public int sumSubarrayMins(int[] A) {
        int sum = 0;
        for (int i = 0; i < A.length; i++){
            // left * right + left + right + 1
            sum += ((i) * (A.length - i - 1) + i + (A.length - i - 1) + 1) * A[i]; 
        }
        return sum;
    }
}
