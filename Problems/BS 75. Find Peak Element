class Solution {
    /**
     * @param A: An integers array.
     * @return: return any of peek positions.
     */
     // 这题的条件说了是一定会有peak的，所以不用考虑[1,2,3,4,5,6,7,8,9]
    // public int findPeak(int[] A) {
    //     // write your code here
    //     int start = 1, end = A.length-2; // 1.答案在之间，2.不会出界 
    //     while(start + 1 <  end) {
    //         int mid = (start + end) / 2;
    //         if(A[mid] < A[mid - 1]) {
    //             end = mid;
    //         } else if(A[mid] < A[mid + 1]) {
    //             start = mid;
    //         } else {
    //             end = mid;
    //         }
    //     }
    //     if(A[start] < A[end]) {
    //         return end;
    //     } else { 
    //         return start;
    //     }
    // }
    public int findPeak(int[] A) {
        // write your code here
        // search + 周围的数字有一定规律 -- 》 二分
        if (A == null && A.length == 0) {
            return -1;    
        }
        
        int start = 0;
        int end = A.length - 1;
        
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (A[mid] > A[mid - 1] && A[mid] > A[mid + 1]) {
                return mid;
            } else if (A[mid] > A[mid - 1] && A[mid] < A[mid + 1]) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (A[start] > A[start - 1] && A[start] > A[start + 1]) {
            return start;
        } else if (A[end] > A[end - 1] && A[end] > A[end + 1]) {
            return end;
        }
        return -1;
    }
}
