public class Solution {
    /*
     * @param s: a string,  encoded message
     * @return: an integer, the number of ways decoding
     */
/**
* 512. Decode Ways
* https://www.lintcode.com/problem/decode-ways/description
* pro: 一串数字有几种decode成字母的方式
* tag: dp, 划分形式
* sol: 
*      ① dp[i] = 能被划分成几种
*      ② dp[i] = i本身是不是合格 || i可以划分成两种么 || 
*      ③ 初始化: 
*      ④ 计算顺序:n
* 
*      Space O()
*      Time  O()
* 
* mis:  
* fol:
* oth:
*/
    public int numDecodings(String s) {
        // write your code here
        // 爬楼梯的变种，对一个digit来说，我可以自己成一个，也可以和前面一位成一个。也就是爬一格，爬两格的问题
        if (s == null || s.length() == 0 || s.charAt(0) == '0') {
            return 0;
        }
        int[] dp = new int[s.length() + 1];
        
        dp[0] = 1;
        dp[1] = 1;
        for (int i = 2; i <= s.length(); i++) {
            if (s.charAt(i - 1) == '0' && s.charAt(i - 2) != '1' 
                && s.charAt(i - 2) != '2'){
                return 0;
            }
            dp[i] = dp[i - 1];
            // special case 10 20的情况 dp[i] 不直接相加
            if (s.charAt(i - 1) == '0') {
                dp[i] = dp[i - 2];
            }
            if ((s.charAt(i - 2) == '1' && s.charAt(i - 1) != '0')
                || (s.charAt(i - 2) == '2' && s.charAt(i - 1) > '0' 
                    &&s.charAt(i - 1) < '7')) {
               dp[i] += dp[i - 2]; 
            }
        }
        return dp[s.length()];
    }
};
