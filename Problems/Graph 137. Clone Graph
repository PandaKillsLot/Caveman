/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     ArrayList<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */
public class Solution {
    /**
    * 137. Clone Graph
    * https://www.lintcode.com/problem/clone-graph/description
    * pro:克隆图
    * tag: graph
    * sol: 1)制造新节点 2) 克隆关系 ! 为了方便, 把所有node方进一个list里
    * mis:  
    * fol:
    * oth:
    */
    /**
     * 
     * @param node: A undirected graph node
     * @return: A undirected graph node
     */
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        // write your code here
        if (node == null) {
            return null;
        }
        HashMap<UndirectedGraphNode, UndirectedGraphNode> map = new HashMap<UndirectedGraphNode, UndirectedGraphNode>();
        ArrayList<UndirectedGraphNode> nodes = new ArrayList<UndirectedGraphNode>();
        // clone node
        // use stack will be more straight forward. However, if you use a stack, you have to iterate it all over again
        UndirectedGraphNode head = new UndirectedGraphNode(node.label);
        map.put(node, head);
        nodes.add(node);
        int timer = 0;
        while(timer < nodes.size()) {
            UndirectedGraphNode temp = nodes.get(timer);
            for (UndirectedGraphNode neigh : temp.neighbors) {
                if (!map.containsKey(neigh)) {
                    head = new UndirectedGraphNode(neigh.label);
                    map.put(neigh, head);
                    nodes.add(neigh);
                }
            }
            timer++;
        }
        
        // clone edges
        for (UndirectedGraphNode oldNode : nodes) {
            for (UndirectedGraphNode neigh : oldNode.neighbors) {
                map.get(oldNode).neighbors.add(map.get(neigh));
            }
        }
        return map.get(node);
    }
}
