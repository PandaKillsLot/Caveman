/**
 * Definition for ListNode
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */


public class Solution {
    /**
     * 228. Middle of Linked List
     *https://www.lintcode.com/problem/middle-of-linked-list/description
     * pro: 一次遍历求链表中点
     * tag： two pointer
     * sol： 快慢指针，同向双指针做追击问题
     *       1) 什么时候结束
     *       2) fast到底在slow的下一个好还是和slow一起好？
     *       他妈的不要靠脑子想，单双数情况试一下你个傻逼
     * mis：链表都不难，但都不好写对。
     *      1) 头在哪里（比如快指针）
     *      2) 什么时候结束，是 pointer == null 还是 pointer.next == null
     *      3) 复制链表，翻转，记得把next变成 null，不然绝对爆栈
     *      4) 复制链表，翻转，next还没存，就先别删，删你妈逼啊删
     * follow： 
     * @param head: the head of linked list.
     * @return: a middle node of the linked list
     */
    public ListNode middleNode(ListNode head) {
        // write your code here
        if (head == null){
            return null;
        }
        // 链表遍历核心问题之一，遍历终点在哪里！
        ListNode slow = head;
        ListNode fast = head.next;
        while (fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
}
