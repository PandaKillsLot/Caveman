/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
/**
* 93. Balanced Binary Tree
* https://www.lintcode.com/problem/balanced-binary-tree/description
* pro:验证是不是平衡二叉树
* tag: dfs tree
* sol: root看下自己左右两边是不是一样
* mis:  
* fol:
* oth:
*/

public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: True if this Binary tree is Balanced, or false.
     */
    public class ResultType{
        boolean isBBT;
        int height;

    }

    public boolean isBalanced(TreeNode root) {
        // write your code here
        if (root == null) {
            return true;
        }
        return helper(root).isBBT;
    }
    public ResultType helper(TreeNode root) {
        if (root == null) {
            ResultType temp = new ResultType();
            temp.isBBT = true;
            temp.height = 0;
            return temp;
        }
        ResultType left = helper(root.left); 
        ResultType right = helper(root.right);
        
        ResultType rt = new ResultType();
        
        if (!left.isBBT || !right.isBBT
            || Math.abs(left.height - right.height) > 1 ){
            rt.isBBT = false;
            return rt;
        } else {
            rt.isBBT = true;
            rt.height = Math.max(left.height, right.height) + 1;
            return rt;
        }
        
    }
}
