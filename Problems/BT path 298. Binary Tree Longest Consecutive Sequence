/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
/**
*298. Binary Tree Longest Consecutive Sequence
*https://leetcode.com/problems/binary-tree-longest-consecutive-sequence/description/
*pro:298. Binary Tree Longest Consecutive Sequence
*tag:bt path
*sol: 遍历，往比自己小的递归
*mis:
*fol：549. Binary Tree Longest Consecutive Sequence II
*
*/
class Solution {
    int max = 0;
    public int longestConsecutive(TreeNode root) {
        helper(root, 1);
        return max;
    }
    // traversecompare current path to max
    private void helper(TreeNode root, int len){
        if (root == null){
            return;
        }
        max = Math.max(max, len);
        if (root.left != null && root.val + 1 == root.left.val){
            helper(root.left, len + 1);  
        } else {
            helper(root.left, 1); 
        }
        
        if (root.right != null && root.val + 1 == root.right.val){
            helper(root.right, len + 1);  
        } else {
            helper(root.right, 1); 
        }
    }
}
