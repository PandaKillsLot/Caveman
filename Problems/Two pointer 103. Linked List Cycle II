/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {
    /**
     * 103. Linked List Cycle II
     * https://www.lintcode.com/problem/linked-list-cycle-ii/description
     * pro：带环链表求环
     * tag: two p
     * sol: 快慢指针
     *     假设环入口前长度是a，相遇在环里的位置z，z距离a距离是b，c +
     *     b = 环的长度
     *     相遇时 slow ： 1 * t = a + b fast : 2 * t = a + b + b + c
     *            a = c
     *     如果开始时 fast在head的next， slow ： 1 * t = a + b fast : 1 + 2 * t = a + b + b + c
     *     a = c - 1也就是说，为了fast和slow可以在入口相遇，c 要多走一格。
     *     所以双指针，一个从head走，一个从相遇的下一个走
     * mis：加一减一傻傻分不清
     * follow ： 380. Intersection of Two Linked Lists
     *       
     * mis:
     * fols:
     * @param head: The first node of linked list.
     * @return: The node where the cycle begins. 
     *           if there is no cycle, return null
     * t1 - 2
     * http://www.cnblogs.com/youxin/p/3303172.html
     * 无论快慢指针，从哪里走，走多快多慢，都会相遇的
     * 但是，程序的条件是，slow ！= fast。所以就多走一步.然后，因为前面夺走了，所以实际的相遇点要比原来后面i一个，所以后面的节点要再先走一个
     */
    public ListNode detectCycle(ListNode head) {  
        // write your code here
        if (head == null || head.next == null){
            return null;
        }
        ListNode slow = head;
        ListNode fast = head.next;
        // 要是fast = head， 你第一步搞个毛勒
        while (fast != slow){
            if(fast==null || fast.next==null){
                System.out.println("?");
                return null;
            }
            fast = fast.next.next;
            slow = slow.next;
        }
        slow = head;
        fast = fast.next;
        // next ?
        while (slow != fast){
            fast = fast.next;
            slow = slow.next;
        }
        return slow;
    }
}
