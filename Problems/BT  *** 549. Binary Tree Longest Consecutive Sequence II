/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    /**
    *549. Binary Tree Longest Consecutive Sequence II
    *https://leetcode.com/problems/binary-tree-longest-consecutive-sequence-ii/description/
    *pro: longest 12345 path(could pass root)
    *tag: btree path
    *solution: 查户口，但是这次不是在下面的最长max路径和single path里选，而是同时保留左右两个节点，以备后面选择
    * mis:机械性的选择了之存maxpath和 single path，不要背题目
             与其思考，有没有a，有没有b，max是a还是a+b，还不如彻底算一下，然后没有就是0
    */
    class ResultType{
        int max;
        int bigger;
        int smaller;
        
        public ResultType (int max, int left, int right){
            this.max = max;
            this.bigger = left;
            this.smaller = right;
        }
    }
    public int longestConsecutive(TreeNode root) {
        return helper(root).max;
    }
    private ResultType helper(TreeNode root){
        if (root == null){
            return new ResultType(0, 0, 0);
        }
        ResultType left = helper(root.left);
        ResultType right = helper(root.right);
        // int bigger = 1;
        // int smaller = 1;
        int bigger = 1;
        int smaller = 1;
        if (root.left != null && root.left.val + 1 == root.val){
            smaller = Math.max(smaller, left.smaller + 1);
        }
        if (root.left != null && root.left.val - 1 == root.val){
            bigger = Math.max(bigger, left.bigger + 1);
        }
        if (root.right != null && root.right.val + 1 == root.val){
            smaller = Math.max(smaller, right.smaller + 1);
        }
        if (root.right != null && root.right.val - 1 == root.val){
            bigger = Math.max(bigger, right.bigger + 1);
        }
        int max = 1;
        if (root.left != null && root.right != null && root.left.val + root.right.val == 2 * root.val){
            max = smaller + bigger - 1;
        } else {
            max = Math.max(smaller, bigger);
        }
        max = Math.max(max, Math.max(left.max, right.max));

        return new ResultType(max, bigger, smaller);
        
    }
}
