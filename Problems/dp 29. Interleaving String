public class Solution {
    /**
     * @param s1: A string
     * @param s2: A string
     * @param s3: A string
     * @return: Determine whether s3 is formed by interleaving of s1 and s2
     */
/**
* 29. Interleaving String
* https://www.lintcode.com/problem/interleaving-string/my-submissions
* pro: 求一个数组能不能由两个数组交织而成
* tag: dp 双序列
* sol: 二维数组双序列 -> 双序列dp首先是序列dp,所以多开一格
*                        动规先看是可行, 最值, 还是计数
*      ① dp[i][j] = s1的前i个字符和s2的前j个字符能不能排出s3的i + j个字符
*      // 如果最后的字符来自s1, 那么看s1之前的字符能不拼出这个字,如果最后的字符来自s2, 那么看s2之前的字符能不拼出这个字,
*      ② dp[i][j] = s1[i - 1] == s3[i + j - 1] && dp[i - 1][j]
*               || s2[i - 1] == s3[i + j - 1] && dp[i][j - 1];
*      ③ 初始化: 第一行&第一列 在空窜下相等
*                (思考怎么初始化第一列可以从后面的dp[i][j] 怎么是用到哪些, 怎么用到的来看)
*      ④ 计算顺序:n
* 
*      Space O()
*      Time  O()
* 
* mis:  
* fol:
* oth:
*/
    public boolean isInterleave(String s1, String s2, String s3) {
        // write your code here
        if (s1 == null){
            return s2.equals(s3);
        }
        if (s2 == null){
            return s2.equals(s3);
        }
        if (s3 == null){
            return false;
        }
        int m = s1.length();
        int n = s2.length();
        int k = s3.length();
        
        if (m + n != k){
            return false;
        }
        
        boolean[][] dp = new boolean[m + 1][n + 1];
        dp[0][0] = true;
        for (int i = 0; i < m; i++){
            if (s1.charAt(i) == s3.charAt(i)) {
                dp[i + 1][0] = true;
            }
        }
        for (int i = 0; i < n; i++){
            if (s2.charAt(i) == s3.charAt(i)) {
                dp[0][i + 1] = true;
            }
        }
        
        for (int i = 1; i <= m; i++){
            for (int j = 1; j <= n; j++){
                if (s1.charAt(i - 1) == s3.charAt(i + j - 1) && dp[i - 1][j]){
                    dp[i][j] = true;
                } else if (s2.charAt(j - 1) == s3.charAt(i + j - 1) && dp[i][j - 1]) {
                    dp[i][j] = true;
                }
            }
        }
        return dp[m][n];
    }
}




















