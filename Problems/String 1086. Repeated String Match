public class Solution {
    /**
    * 1086. Repeated String Match
    * https://www.lintcode.com/problem/repeated-string-match/description
    * pro: A字符创重复多少次可以使得B串成为他的子串
    * tag: String
    * sol: strstr() + 循环数组, 如果一个数组是另外一个数组滚动出来的, 最多len * 2 就可以判定了
    * mis: 
    * fol:
    * oth:
    */
    /**
     * @param A: a string
     * @param B: a string
     * @return: return an integer
     */
    public int repeatedStringMatch(String A, String B) {
        if (A.length() == 0) {
            return -1;
        }
        
        StringBuilder strB = new StringBuilder();
        String initial = A;
        
        strB.append(A);
        int m = A.length(); //1
        int n = B.length(); //10000
        int initialLength = m;//1
        int count = 1;
        int position = -1;
        
        while (m <= 2 * n || m <= 2 * m) {
            position = search(strB.toString(), B);
        
            if (position == -1) {
                strB.append(A);
                m += initialLength;
                count++;
                
            } else {
                return count;
                
            }
            
        }
        return -1;
    }
    
    public int search(String source, String target) {
        
        int m = source.length();
        int n = target.length();
        
        if(m < n) {
            return -1;
        }
        
        for (int i = 0; i <= m - n; i++) {
            
            int j = 0;
            
            for (j = 0; j < target.length(); j++){
                
                if (source.charAt(i + j) != target.charAt(j)) {
                    break;
                }
            }
            
            if (j == n) {
                return i;
            }
            
        }
        return -1;

    }
    
}
