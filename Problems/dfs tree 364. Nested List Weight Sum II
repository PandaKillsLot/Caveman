/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *     // Constructor initializes an empty nested list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public void add(NestedInteger ni);
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */

/**
* 364. Nested List Weight Sum II
* https://leetcode.com/problems/nested-list-weight-sum-ii/description/
* pro: 叶子节点算最1, 按层, dfs计算tree node和
* tag: dfs tree
* sol: math ! 3x + 2y + z =  4 * (x + y + z) -  x - 2y - 3z(depth) 你dfs顺路算下来的, 一定只有当前的depth
* mis:  
* fol:
* oth:
*/
class Solution {
    public int depthSumInverse(List<NestedInteger> nestedList) {
        int depthSum = dfs(nestedList, 1);
        return flatSum * (max + 1) - depthSum;
    }

    int flatSum = 0;
    int max = 1;
    private int dfs(List<NestedInteger> input, int depth) {
        if (input == null || input.size() == 0) return 0;
        int sum = 0;
        for (NestedInteger i : input) {
            if (i.isInteger()) {
                max = Math.max(depth, max);
                sum += i.getInteger() * depth;
                flatSum += i.getInteger();
            } else {
                sum += dfs(i.getList(), depth + 1);
            }
        }
        return sum;
    }
}
