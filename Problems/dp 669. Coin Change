public class Solution {
    /**669. Coin Change
     * https://www.lintcode.com/problem/coin-change/description
     * pro: 求一个数值,最少要几个由几个给定的数字表示
     * tag: dp
     * sol: dp[i] 表示这个数, 至少需要几个硬币
     *      dp[i] = Math.min(dp[i - coins[j]]......)
     *      初始化为 1的格子
     *      s O(n) t O(nk)
     * mis: 边界处理, coins面值可能比amount高
     * @param coins: a list of integer
     * @param amount: a total amount of money amount
     * @return: the fewest number of coins that you need to make up
     */
    public int coinChange(int[] coins, int amount) {
        // write your code here
        if (coins == null || amount <= 0 ){
            return 0;
        }
        int[] minCoins = new int[amount + 1];
        
        minCoins[0] = 0;
        for (int i = 0; i < coins.length; i++){
            // mistake
            if (coins[i] > amount){
                continue;
            }
            minCoins[coins[i]] = 1;
        }
        for (int i = 1; i < minCoins.length; i++){
            if (minCoins[i] == 1){
                continue;
            }
            minCoins[i] = Integer.MAX_VALUE;
            for (int j = 0; j < coins.length; j++){
                if (i - coins[j] > 0 &&  minCoins[i - coins[j]] != Integer.MAX_VALUE){
                    minCoins[i] = Math.min(minCoins[i], minCoins[i - coins[j]] + 1);
                }
            }
        }
        // for (int i = 0; i < minCoins.length; i++){
        //     System.out.println(minCoins[i]);
        // }
        //return minCoins[amount]
        return minCoins[amount] == Integer.MAX_VALUE ? -1 : minCoins[amount];
    }
}
