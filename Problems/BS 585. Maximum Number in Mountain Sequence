public class Solution {
    /**585. Maximum Number in Mountain Sequence
     * https://www.lintcode.com/problem/maximum-number-in-mountain-sequence/description
     * @param nums: a mountain sequence which increase firstly and then decrease
     * pro： 找先升后降序列的最大值
     * tag：二分
     * solu：mid如果处于升序就往后，降序就往前
     * mis：注意是不是一定有最大值
     * 
     * 
     * 
     * @return: then mountain top
     * @ Only twice
     */
    public int mountainSequence(int[] nums) {
        // write your code here
        if (nums == null || nums.length == 0) {
            return 0;
        }
        if (nums.length == 1) {
            return nums[0];
        }else if (nums[0] >= nums[1]) {
            return nums[0];
        }else if (nums[nums.length - 1] >= nums[nums.length - 2]) {
            return nums[nums.length - 1];
        }
        
        int start = 0;
        int end = nums.length - 1;
        
        while (start + 1 < end) {
            int mid = (start + end) / 2;
            
            if (nums[mid] > nums[mid - 1] && nums[mid] > nums[mid + 1]) {
                
                return nums[mid];
            } else if (nums[mid] > nums[mid - 1] ) {
                start = mid;
            } else{
                end = mid;
            }
        }
        return Math.max(nums[start], nums[end]);
    }
}
