public class Solution {
    /**
     * @param pages: an array of integers
     * @param k: An integer
     * @return: an integer
     */
/** 
* 437. Copy Books
* https://www.lintcode.com/problem/copy-books/description
* pro: 几个人抄书, 最快多久抄完
* tag: dp 划分
* sol: 枚举 = = 1 抄一本, 2 超全部 3 不抄/...,算个min
*               
* 
*      ① dp[i][j] =  第k个人抄第i本书的最优解
*      ② dp[i] =  dp[k][i] = Math.min(dp[k][i], Math.max(dp[k - 1][j], sum));最优解的瓶颈
*      ③ 初始化: 
*      ④ 计算顺序:n
* 
*      Space O()
*      Time  O()
* 
* mis:  
* fol:
* oth:
*/
    public int copyBooks(int[] pages, int K) {
        // write your code here
        if (pages == null || pages.length == 0){
            return 0;           
        }
        int len = pages.length;
        int[] prefix = new int[len + 1];
        for (int i = 1; i <= len; i++){
            prefix[i] = prefix[i - 1] + pages[i - 1];
        }
        // 第k个人抄第i本书的最优解
        int[][] dp = new int[K + 1][len + 1];
        dp[0][0] = 0;
        for (int i = 1; i <= len; i++){
            dp[0][i] = Integer.MAX_VALUE;
        }
        for (int k = 1; k <= K; k++){
           
            for (int i = 1; i <= len; i++){
                dp[k][i] = Integer.MAX_VALUE;
                int sum = 0;
                for (int j = i; j >= 0; --j){
                    dp[k][i] = Math.min(dp[k][i], Math.max(dp[k - 1][j], sum));
                    //dp[0][i] = Integer.MAX_VALUE;
                    if (j > 0){
                        sum += pages[j - 1];
                    }                    
                }

            }
        }
        return dp[K][len];
        
        // if (k >= prefix[len]){
        //     return 1;
        // }
        //dp[i] = dp[i - 1]人抄这么多, 我抄完 
        
    }
    public int copyBooksII(int[] pages, int k) {
        // write your code here
        if (pages == null || pages.length == 0){
            return 0;           
        }
        int len = pages.length;
        int sum = 0;
        for (int i = 0; i < len; i++){
            sum += pages[i];
        }
        int start = 1;
        int end = sum;
        while (start + 1 < end){
            int mid = (start + end) / 2;
            if (check(mid, pages, k)){
                end = mid;
            } else {
                start = mid;
            }
        }
        if (check(start, pages, k)){
            //System.out.println("?");
            return start;
        }
        return end;
    }
    private boolean check(int time, int[] pages, int k){
        int cur = time;
        k--;
        for (int i = 0; i < pages.length; i++){
            if (cur < pages[i]){
                cur = time;
                k--; 
            }
            cur -= pages[i];
            if (cur < 0){
                return false;
            }
        }
        return k >= 0;
    }

}
