public class Solution {
    /**
     * @param costs: n x 3 cost matrix
     * @return: An integer, the minimum cost to paint all houses
     */
     
     // 经典错误, 自己浅拷贝自己, 然后以那个为参照, 自己对自己做修改.
     
     // 滚动数组是两个数组对翻, 而不是单纯的一个数来回换引用
/**
* 515. Paint House
* https://www.lintcode.com/problem/paint-house/description
* pro: 房子相邻颜色不一样, 3种 造价不一样, 问最后价格
* tag: dp 
* sol: 各种方案算一遍, 记下来
*      ① dp[i][j] = 当前i房涂j的区别
*      ② dp[i][j] = min {dp[i - 1][1..j]}
*      ③ 初始化: 
*      ④ 计算顺序:n
* 
*      Space O()
*      Time  O()
* 
* mis:  
* fol:
* oth:
*/
    public int minCost(int[][] costs) {
        // write your code here
        if (costs == null || costs.length == 0){
            return 0;
        }
        int[][] dp = new int[2][3];
        
        int cur = 0;
        int prev = 0;
        
        // dp[0][0] = 0;
        // dp[0][1] = 0;
        // dp[0][2] = 0;
        
        for (int i = 1; i <= costs.length; i++){
            prev = cur;
            cur = 1 - prev;
            
            dp[cur][0] = Math.min(dp[prev][1], dp[prev][2]) + costs[i - 1][0];
            dp[cur][1] = Math.min(dp[prev][0], dp[prev][2]) + costs[i - 1][1];
            dp[cur][2] = Math.min(dp[prev][0], dp[prev][1]) + costs[i - 1][2];
        }
        return Math.min(dp[cur][2] ,Math.min(dp[cur][0], dp[cur][1]));
    }
    public int minCostII(int[][] costs) {
        // write your code here
        if (costs == null || costs.length == 0){
            return 0;
        }
        int[] old = new int[3];
        int[] now = new int[3];
        // old[0] = 0;
        // old[0][1] = 0;
        // old[0][2] = 0;
        
        for (int i = 1; i <= costs.length; i++){
            now[0] = Math.min(old[1], old[2]) + costs[i - 1][0];
            now[1] = Math.min(old[0], old[2]) + costs[i - 1][1];
            now[2] = Math.min(old[0], old[1]) + costs[i - 1][2];
            
            old = now;
        }
        return Math.min(old[2] ,Math.min(old[0], old[1]));
    }
    public int minCostI(int[][] costs) {
        // write your code here
        if (costs == null || costs.length == 0){
            return 0;
        }
        int[][] dp = new int[costs.length + 1][3];
        
        dp[0][0] = 0;
        dp[0][1] = 0;
        dp[0][2] = 0;
        
        for (int i = 1; i <= costs.length; i++){
            dp[i][0] = Math.min(dp[i - 1][1], dp[i - 1][2]) + costs[i - 1][0];
            dp[i][1] = Math.min(dp[i - 1][0], dp[i - 1][2]) + costs[i - 1][1];
            dp[i][2] = Math.min(dp[i - 1][0], dp[i - 1][1]) + costs[i - 1][2];
        }
        return Math.min(dp[costs.length][2] ,Math.min(dp[costs.length][0], dp[costs.length][1]));
    }
}
