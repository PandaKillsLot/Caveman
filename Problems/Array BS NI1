class Solution {
    /**
    * 287. Find the Duplicate Number
    * https://leetcode.com/problems/find-the-duplicate-number/description/
    * pro: O(1)的space里找数组的重复数，只有一个
    * tag： array ,BS 287. Find the Duplicate Number
    * sol：
    *    对值二分， log * n 校验
    *    快慢指针 n，坐标和值转换
    */
    public int findDuplicate(int[] nums) {
        if (nums == null || nums.length == 0){
            return -1;
        }
        int start = 1;
        int end = nums.length - 1;
        
        while (start + 1 < end){
            int mid = start + (end - start) / 2;
            int number = check(nums, mid);
            
            if (number > mid){
                end = mid;
            } else {
                start = mid;
            }
        }
        if (check(nums, start) > start){
            return start;
        }
        return end;
    }
    private int check(int[] nums, int target){
        int count = 0;
        
        for (int i = 0; i < nums.length; i++){
            if (nums[i] <= target){
                count++;
            }
        }
        
        return count;
    }
}












