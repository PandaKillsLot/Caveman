class Solution {
    // abcd#
    // 走到第一个, '#'清零的地方
    // 然后比较
    // acbd
/**
* ***844. Backspace String Compare
* https://leetcode.com/problems/backspace-string-compare/description/
* pro: 求两个带删除符号的String,执行完删除程序是是不是相等
* tag: String, two pointer
* sol: 双指针, 从后面往前面比较, 遇到#就跳, 跳到停下来的地方看是不是一样.
        merge双序列的电信
* mis:  1) 大while的条件在是 i >= 0, 这样走不到一半就停下来了 -> 
        2) 在跳的时候遇到'#'其实还需要回到第一个小while里去, 所以合并在一起是最好的
        3) 这种题目在判断charAt(i)是否相等时, 一定要先判断下是不是越界;
        4) 一个while loop, while严格使用一种break, 不然会造成混乱
* fol:
* oth:
*/
    
    public boolean backspaceCompare(String S, String T) {
        if (S == null || T == null){
            return false;
        }
        int i = S.length();
        int j = T.length();
        int sb = 0;
        int tb = 0;
        i--;
        j--;
        
        while (i >= 0 || j >= 0){
            while (i >= 0){
                if (S.charAt(i) == '#') {
                    i--;
                    sb++;
                } else if (sb > 0){
                    sb--;
                    i--;
                } else {
                    break;
                }
            }
            while (j >= 0){
                if (T.charAt(j) == '#') {
                    j--;
                    tb++;
                    // tb 不能到-1
                } else if (tb > 0){
                    tb--;
                    j--;
                } else {
                    break;
                }
            }
            // a#a#
            // aa##

            if (i >= 0 && j >= 0 && S.charAt(i) != T.charAt(j)){
                return false;
            }
            if (i < 0 && j >= 0 || i >= 0 && j < 0){
                return false;
            }
            i--;
            j--;
        }
        // System.out.println("2");
        // System.out.println("i " + i + " j " + j);

        return true;
    }
    public boolean backspaceCompareI(String S, String T) {
        if (S == null || T == null){
            return false;
        }
        int i = S.length();
        int j = T.length();
        int sb = 0;
        int tb = 0;
        i--;
        j--;
        
        while (i >= 0 || j >= 0){
            //System.out.println("----------- i " + i + " j " + j);
            while (i >= 0 && (S.charAt(i) == '#' || sb > 0)){
                if (S.charAt(i) != '#') {
                    i--;
                    sb--;
                } else {
                    sb++;
                    i--;
                }
            }
            while (j >= 0 && (T.charAt(j) == '#' || tb > 0)){
                if (T.charAt(j) != '#') {
                    j--;
                    tb--;
                } else {
                    tb++;
                    j--;
                }
            }
            // a#a#
            // aa##
            if (i >= 0 && j >= 0 && (S.charAt(i) == '#' || T.charAt(j) == '#')){
                continue;
            } else if (i >= 0 && j >= 0 && S.charAt(i) != T.charAt(j)){
                if (i == 0 && j == 0 && tb > 0 && sb > 0){
                    continue;
                } else{
                    // System.out.println("1");
                    // System.out.println("i " + i + " j " + j);
                    return false;
                }

            } else {
                i--;
                j--;
            }

        }
        // System.out.println("2");
        // System.out.println("i " + i + " j " + j);

        return i == j;
    }
}
