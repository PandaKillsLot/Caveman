/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
 
/**
* 71. Binary Tree Zigzag Level Order Traversal
* https://www.lintcode.com/problem/binary-tree-zigzag-level-order-traversal/description
* pro: 二叉树zigzag遍历
* tag: binary tree
* sol: 层级遍历 + 个记录是正序还是倒序
* mis:  
* fol:
* oth:
*/

public class Solution {
    /**
     * @param root: A Tree
     * @return: A list of lists of integer include the zigzag level order traversal of its nodes' values.
     */
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        // write your code here
        List<List<Integer>> ans = new ArrayList<>();
        if (root == null){
            return ans;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        int direction = 1;
        queue.offer(root);
        
        while (!queue.isEmpty()){
            int size = queue.size();
            List<Integer> level = new ArrayList<>();
            for(int i = 0; i < size; i++){
                TreeNode cur = queue.poll();
                level.add(cur.val);
                if (cur.left != null){
                    queue.offer(cur.left);
                }
                if (cur.right != null){
                    queue.offer(cur.right);
                }
            }
            if (direction == -1){
                Collections.reverse(level);
            }
            direction *= -1;
            ans.add(level);
        }
        return ans;
    }
}
