/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

/**
* 297. Serialize and Deserialize Binary Tree
* https://leetcode.com/problems/serialize-and-deserialize-binary-tree/description/
* pro: 将二叉树序列化成一个String, 然后将String反序列化成bt
* tag: BT, bsf
* sol: 有 dfs和bfs两种解. dfs相当于一颗Balanced Bt, 所有空节点存成null. 但是BST按层存,只存一层null节点就好
* mis:  
* fol:
* oth:
*/


// bfs solution
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        
        while (!queue.isEmpty()){
            TreeNode node = queue.poll();
            if (node == null){
                sb.append("null,");
            } else {
                sb.append(node.val + ",");
                queue.offer(node.left);
                queue.offer(node.right);
            }
            
        }
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        int pointer = 1;
        String[] vals = data.split(",");
        Queue<TreeNode> queue = new LinkedList<>();
        
        TreeNode root = vals[0].equals("null") ? null : new TreeNode(Integer.valueOf(vals[0]));
        queue.offer(root);
        
        while (pointer < vals.length && !queue.isEmpty()){
            TreeNode node = queue.poll();
            node.left = vals[pointer].equals("null") ? null : new TreeNode(Integer.valueOf(vals[pointer]));
            pointer++;
            if (node.left != null){
                queue.add(node.left);
            }
            node.right = vals[pointer].equals("null") ? null : new TreeNode(Integer.valueOf(vals[pointer]));
            pointer++;
            if (node.right != null){
                queue.add(node.right);
            }
        }
        return root;
    
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));

// dfs solution

public class Codec {

   int pos = 0;
    String data;
    public String serialize(TreeNode root) {
        // write your code here
        if(root == null){
            return "";
        }
        String ans = serialize_helper(root, "");
        int i = ans.length() - 1;
        while (i >= 0 && !Character.isDigit(ans.charAt(i))) {
            i--;
        }
        System.out.println(ans.substring(0,i + 1));
        return ans.substring(0,i + 1);
    }
    private String serialize_helper(TreeNode root, String data) {
        // write your code here
        if(root == null){
            return "#";
        }
        data = String.valueOf(root.val) + "," 
            + serialize_helper(root.left, data) + "," 
            + serialize_helper(root.right, data)  ;
        System.out.println("!!!!!!!!!!!!!!" + data);    
        return data;
    }

    /**
     * This method will be invoked second, the argument data is what exactly
     * you serialized at method "serialize", that means the data is not given by
     * system, it's given by your own serialize method. So the format of data is
     * designed by yourself, and deserialize it here as you serialize it in 
     * "serialize" method.
     */
    public TreeNode deserialize(String data) {
        
        // write your code here
        System.out.println("?????????? " + this.data);
        if (data.length() <= 0){
            return null;
        }
        this.data = data;
        System.out.println("?????????? " + this.data);
        return deserialize_helper();
    }
    public TreeNode deserialize_helper(){
        if (data.length() <= 0) {
            return null;
        }
        if (data.charAt(0) == ',') {
            data = data.substring(1, data.length());
        }
        if (data.charAt(0) == '#') {
            data = data.substring(1, data.length());
            return null;
        }
        int pos = 0;
        System.out.println("pos " + pos);
        while (pos < data.length() && (Character.isDigit(data.charAt(pos)) || data.charAt(pos) == '-')) {
            pos++;
        }
        System.out.println("pos " + pos);
        System.out.println("wawawawawawa " + data.substring(0, pos));
        TreeNode root = new TreeNode(Integer.parseInt(data.substring(0, pos)));
        
        if (pos >= data.length()) {
            data = "";
        } else {
            data = data.substring(pos + 1, data.length());
        }
        
        root.left =  deserialize_helper();
        root.right =  deserialize_helper();
        return root;
    }
}




