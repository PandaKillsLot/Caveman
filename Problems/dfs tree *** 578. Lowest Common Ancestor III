/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
/**
* 578. Lowest Common Ancestor III
* https://www.lintcode.com/problem/lowest-common-ancestor-iii/description?_from=ladder&&fromId=1
* pro:LCA 但是一定存在LCA未必存在(可能有node不在)
* tag: dfs tree
* sol: 1) 找到b之后不能停, 还要继续确认a到底在不在, 用rs记一下
*      2) 这里用了优化逻辑运算的方式
* mis:  
* fol:
* oth:
*/

class ResultType {
    public boolean a_exist, b_exist;
    public TreeNode node;
    ResultType(boolean a, boolean b, TreeNode n) {
        a_exist = a;
        b_exist = b;
        node = n;
    }
}

public class Solution {
    /**
     * @param root The root of the binary tree.
     * @param A and B two nodes
     * @return: Return the LCA of the two nodes.
     */
    public TreeNode lowestCommonAncestor3(TreeNode root, TreeNode A, TreeNode B) {
        // write your code here
        ResultType rt = helper(root, A, B);
        if (rt.a_exist && rt.b_exist)
            return rt.node;
        else
            return null;
    }

    public ResultType helper(TreeNode root, TreeNode A, TreeNode B) {
        if (root == null)
            return new ResultType(false, false, null);
            
        ResultType left_rt = helper(root.left, A, B);
        ResultType right_rt = helper(root.right, A, B);
        
        if (left_rt.a_exist && left_rt.b_exist) {
            return left_rt;
        }
        
        if (right_rt.a_exist && right_rt.b_exist) {
            return right_rt;
        }
        // 正负大归一
        boolean a_exist = left_rt.a_exist || right_rt.a_exist || root == A;
        boolean b_exist = left_rt.b_exist || right_rt.b_exist || root == B;
        
        if (a_exist && b_exist) {
            return new ResultType(true, true, root);
        }

        return new ResultType(a_exist, b_exist, null);
    }
}
