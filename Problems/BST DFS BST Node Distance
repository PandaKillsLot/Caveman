public class Solution {
    /**
     * 1561. BST Node Distance
     * https://www.lintcode.com/problem/bst-node-distance/description
     * pro: 给一个代表bst的数组,找bst里两个node的距离
     * tag: dfs, bst
     * sol: 1)构建bst 2)添加父节点 3)双端 bfs
     *      或者: 1)构建 2)找最近公共祖先 3) 计算距离最近公共祖先的距离
     * mis:  
     * fol:
     * oth:
     * @param numbers: the given list
     * @param node1: the given node1
     * @param node2: the given node2
     * @return: the distance between two nodes
     */
     
     class Node {
         int val;
         Node father;
         Node left;
         Node right;
         public Node (int val){
             this.val = val;
             this.father = null;
             this.left = null;
             this.right = null;
         }
     }
     
     
    public int bstDistance(int[] numbers, int node1, int node2) {
        // Write your code here
        // ArrayList<Integer> a = new ArrayList<>();
        // a.add(1);
        // a.add(2);
        // System.out.println(a);
        
        
        Node root = new Node(numbers[0]);
        HashMap<Integer, Node> map = new HashMap<Integer, Node>();
        map.put(numbers[0], root);
        
        for (int i = 1; i < numbers.length; i++){
            Node cur = new Node(numbers[i]);
            map.put(numbers[i], cur);
            insert(root, cur);
        }
        
        HashMap<Node, Integer> distance = new HashMap<>();
        Node p1 = map.get(node1);
        Node p2 = map.get(node2);
        
        int step = 0;
        while (p1 != null){
            distance.put(p1, step++);
            p1 = p1.father;
        }
        step = 0;
        while (p2 != null){
            if (!distance.containsKey(p2)){
                step++;
            } else {
                return distance.get(p2) + step;
            }
           
            p2 = p2.father;
        }
        return -1;
    }
    
    private void insert(Node root, Node cur){
        if (root.val >= cur.val){
            if (root.left == null){
                cur.father = root;
                root.left = cur;
            } else {
                insert(root.left, cur);
            }
        } else {
            if (root.right == null){
                cur.father = root;
                root.right = cur;
            } else {
                insert(root.right, cur);
            }
        }
    }
}


public class Solution2 {
    /**
     * @param numbers: the given list
     * @param node1: the given node1
     * @param node2: the given node2
     * @return: the distance between two nodes
     */
    public int bstDistance(int[] numbers, int node1, int node2) {
        // Write your code here
        if(numbers == null || numbers.length == 0)
            return -1;
        
        int result = 0;
        boolean flag1 = false;
        boolean flag2 = false;
        
        TreeNode root = new TreeNode(numbers[0]);
        if(numbers[0] == node1) flag1 = true;
        if(numbers[0] == node2) flag2 = true;
        
        for(int i = 1; i < numbers.length; i++){
            if(numbers[i] == node1)
                flag1 = true;
            if(numbers[i] == node2)
                flag2 = true;
            
            constructBST(root, numbers[i]);
        }
        if(!(flag1 && flag2)) return -1;
        
        TreeNode LCA = findLCA(root, node1, node2);
        
        result = findDistance(LCA, node1) + findDistance(LCA, node2);
    
        return result;
    }
    
    public void constructBST(TreeNode root, int node){
        if(root.val > node){
            if(root.left == null) 
                root.left = new TreeNode(node);
            else 
                constructBST(root.left, node);
        }else{
            if(root.right == null) 
                root.right = new TreeNode(node);
            else 
                constructBST(root.right, node);
        }
    }
    
    public TreeNode findLCA(TreeNode root, int node1, int node2){
        if(node1 < root.val && node2 < root.val)
            return findLCA(root.left, node1, node2);
        if(node1 > root.val && node2 > root.val)
            return findLCA(root.right, node1, node2);
        else 
            return root;
    }
    
    public int findDistance(TreeNode root, int node){
        if(root.val == node) return 0;
        if(root.val < node) return findDistance(root.right, node) + 1;
        else return findDistance(root.left, node) + 1;
    }
}
