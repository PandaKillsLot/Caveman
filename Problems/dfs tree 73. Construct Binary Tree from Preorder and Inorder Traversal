/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
/**
* 73. Construct Binary Tree from Preorder and Inorder Traversal
* https://www.lintcode.com/problem/construct-binary-tree-from-preorder-and-inorder-traversal/description
* pro:给你一个inorder数组, 一个preorder数组, 求一个bt
* tag: dfs tree
* sol: preorder知道根的位置, 从inorder里可以知道左右子树大小,就可以一直搞基下去了
* mis:  不要用绝对位置, 而应该用距离表示(end - start + 1)
* fol:
* oth:
*/
public class Solution {
    /**
     * @param inorder: A list of integers that inorder traversal of a tree
     * @param postorder: A list of integers that postorder traversal of a tree
     * @return: Root of a tree
     * [  1 ,  2  ,  4  ,  5  , 3  ,  6  ,  7]
                      RI2  RI
       [  4  ,  2,    5 ,   1  , 6  ,  3  ,  7]
                  RO2       RO
root和右子树的距离是左子树大小，不是单纯的pos + 1。只在一个顺序里，比较自己和子树的距离




常犯错误，默认为数组边界条件从 0到length
     */
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        // write your code here
        if (preorder == null || inorder == null || preorder.length != inorder.length) {
            return null;
        }
        return helper(preorder, 0, preorder.length - 1, inorder, 0, inorder.length - 1);
    }
    private TreeNode helper(int[] preorder, int pre_start, int pre_end, 
                            int[] inorder, int in_start, int in_end){
        if (pre_start > pre_end || in_start > in_end) {
            return null;
        }
        TreeNode root = new TreeNode(preorder[pre_start]);
        int pos = findPos(root.val, inorder);
        // 始终要记得用距离而不是用位置
        root.left = helper(preorder, pre_start + 1, pre_start + pos - in_start, inorder, in_start, pos - 1);
        // in_start not always one 
        //                            pos + left tree size
        root.right = helper(preorder, pre_start + (pos - in_start) + 1, pre_end, inorder, pos + 1, in_end);
        
        return root;
    }
    private int findPos(int target, int[] array){
        for (int i = 0; i < array.length; i++) {
            if(array[i] == target) {
                return i;
            }
        }
        // not found
        return -1;
    }
}
