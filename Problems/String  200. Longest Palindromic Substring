/**
 * pro:求最长回文子串
 * tag: string, Palindrome
 * sol: 遍历 i，和两种Palindrome， 以i为中心，以i, i + 1为中心 
        S: O(1) T:O(n^2)
 * mis: 
 * follow: 求最长回文子串，不需要连续
*/
public class Solution {
    public String longestPalindrome(String s) {
        if (s == null || s.length() == 0) {
            return "";
        }
        // 遍历检查基数为中心和偶数为中心
        int start = 0, len = 0, longest = 0;
        for (int i = 0; i < s.length(); i++) {
            len = findLongestPalindromeFrom(s, i, i);
            if (len > longest) {
                longest = len;
                start = i - len / 2;
            }
            
            len = findLongestPalindromeFrom(s, i, i + 1);
            if (len > longest) {
                longest = len;
                start = i - len / 2 + 1;
            }
        }
        
        return s.substring(start, start + longest);
    }
    // 从中心点蔓延check
    private int findLongestPalindromeFrom(String s, int left, int right) {
        int len = 0;
        while (left >= 0 && right < s.length()) {
            if (s.charAt(left) != s.charAt(right)) {
                break;
            }
            len += left == right ? 1 : 2;
            left--;
            right++;
        }
        
        return len;
    }
}
// ************************************************          DP VERSION     ****************************************
// ************************************************          DP VERSION     ****************************************
public class Solution {
    /**
     * pro:返回字符串里最长回文串
     * tag:dp，String
     * solution:dp
     *  status：dp[i][j] 字符串 ij之间是不是
     *  equation：dp[i][i] true, dp[i][i + 1]看 i和i+1的字符是不是一样，dp[i][i + n]看两段字符和中间dp[i + 1][j - 1]
     * initiate:dp[i][i], 注意，根据递推关系，会发现i行牵涉到i- 1行
     * answer： 遍历比较最大的
     * mistake:
     * follow up: the longest palindromic sequence不连续 || O(n) manacher解决
     * @param s: input string
     * @return: the longest palindromic substring
     */
    public String longestPalindrome(String s) {
        // write your code here
        char[] array = s.toCharArray();
        int len = s.length();
        boolean[][] dp = new boolean[len][len];
        int left = 0;
        int right = s.length() - 1;
        int max = 0;
        for (int i = s.length() - 1; i >= 0; i--){
            for (int j = i; j < s.length(); j++){
                
                if (i == j){
                    dp[i][j] = true;
                } else if (i == j - 1){
                    dp[i][j] = array[i] == array[j];
                } else if (i < j - 1){
                    
                    dp[i][j] = (array[i] == array[j]) && dp[i + 1][j - 1];
                }
                if (dp[i][j] && j - i > max){
                    max = j - i;
                    left = i;
                    right = j;
                }
            }  
        }
        
        return s.substring(left, right + 1);
        
    }
}








