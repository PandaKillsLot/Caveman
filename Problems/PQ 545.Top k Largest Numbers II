public class Solution {
    /**
     * Top k Largest Numbers II
     * pro：数据流求K个top
     * sol：pq保留后补， iterator复制
     * mis：pq默认是最小堆，然后是minheap才能保证你没比较是O（1），每次和最小的比
     * java iterator 3个 功能，isEmpty， hasNext， next
    * @param k: An integer
    */
    // 默认最小，你个傻吊
    PriorityQueue<Integer> pq;
    int size;
    public Solution(int k) {
        // do intialization if necessary
        pq = new PriorityQueue<Integer>();
        size = k;
    }

    /*
     * @param num: Number to be added
     * @return: nothing
     */
    public void add(int num) {
        // write your code here
        if (pq.size() < size){
            pq.offer(num);
        } else {
            if (num > pq.peek()){
                pq.poll();
                pq.offer(num);
            }
        }
    }

    /*
     * @return: Top k element
     */
    public List<Integer> topk() {
        Iterator it = pq.iterator();
        List<Integer> result = new ArrayList<Integer>();
        while (it.hasNext()) {
            result.add((Integer) it.next());
        }
        Collections.sort(result, Collections.reverseOrder());
        return result;
        // List<Integer> ans = new ArrayList<Integer>();
        // while (!pq.isEmpty()){
        //     ans.add(0,pq.poll());
        // }
        // for (Integer num : ans){
        //     pq.offer(num);
        // }
        // return ans;
    }
}
