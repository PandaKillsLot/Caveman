//class Solution {
    /**
    * 683. K Empty Slots
    * https://leetcode.com/problems/k-empty-slots/description/
    * tag : sliding window, treeset 
    * pro: 给你每天开花的名字和间隔K，求哪天开花出现长度为K的间隔
    * sol： 1)  n^2, 超时了。开一个数组，如果开花了就记成n，然后每次新开一朵花就记一下，然后遍历看有没有间隔。 
    *       2)  nlogn， 放在treeset里，每次检查这个treeset里，相距为K的有没有数，和相距为k + 1 的树开没
    *       3)  nlogn ！！ 没法做！二分检测下。对一个数，开个数组，把那天之前的花全开了，然后放进去，看下是不是有这么长的空档（和最小的比）。长了就往后，     *           短了就往前。需要n^2 的额外空间--> 可以优化到n，每次都只用一个数组就好（每次往里面填N）
    *       4) n，固定长度的sliding windows。
    *             1) 由day[slot] -> slot[day]，在规定了 start，end后，看窗口中间是不是都符合规定
    *             2）不是n^2 的遍历，因为每次 遇到小的left就后移动，right不动。就i一个指针走
    * mis： 1) 可能在当前天数前，前面已经满足条件了，要求最小值
    *       2）result时记得挪动left
    */      
//     public int kEmptySlots(int[] flowers, int k) {
//         if (flowers == null || flowers.length == 0){
//             return -1;
//         }
//         // slots[days]
//         int[] slots = new int[flowers.length];
//         for (int i = 0; i < flowers.length; i++){
//             slots[flowers[i] - 1] = i;
//         }
        
//         int left = 0;
//         int right = k + 1;
//         int result = Integer.MAX_VALUE;
        
        
//         for (int i = 0; i < slots.length && right < slots.length; i++){
//             if (i == right){
//                 result = Math.min(result, Math.max(slots[left], slots[right]) + 1);
//                 left = i;
//                 right = left + k + 1;
//             }else if (slots[i] < slots[left] || slots[i] < slots[right]){
//                 left = i;
//                 right = left + k + 1;
//             }
//         }
//         return result == Integer.MAX_VALUE ? -1 : result;
//     }
        
// }

class Solution {
    public int kEmptySlots(int[] flowers, int k) {
        TreeSet<Integer> active = new TreeSet();
        int day = 0;
        for (int flower: flowers) {
            day++;
            active.add(flower);
            Integer lower = active.lower(flower);
            Integer higher = active.higher(flower);
            if (lower != null && flower - lower - 1 == k ||
                    higher != null && higher - flower - 1 == k)
                return day;
        }
        return -1;
    }
}
