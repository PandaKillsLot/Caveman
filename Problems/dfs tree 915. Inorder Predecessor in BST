/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
/**
* 915. Inorder Predecessor in BST
* http://lintcode.com/problem/inorder-predecessor-in-bst/description
* pro:求bst前继节点
* tag: dfs tree bfs 
* sol: 查找遍历 + 备胎 => 遇到第一个小的存一下, 然后往后看 
* mis:  
* fol:
* oth:
*/
public class Solution {
    /**
     * @param root: the given BST
     * @param p: the given node
     * @return: the in-order predecessor of the given node in the BST
     */
    public TreeNode inorderPredecessor(TreeNode root, TreeNode p) {
        // write your code here
        // 遍历夹记，最后一个肯定是最近的
        TreeNode ans = null;
        while (root != null) {
            if (root.val >= p.val) {
                root = root.left;
            } else {
                // 后补答案
                if (root.val != p.val) {
                    ans = root;
                }
                root = root.right;
            }
        }
        return ans;
    }
}
