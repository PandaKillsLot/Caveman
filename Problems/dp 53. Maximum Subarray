public class Solution {
    /**
     * 53. Maximum Subarray
     * https://leetcode.com/problems/maximum-subarray/description/
     * pro: 一个数组, 求拥有最大和的子序列
     * tag: dp
     * sol: 局部最优 vs 整体最优
            所有的candidate, 一定是以nums[i]结尾的数组 加上前面的局部最优解
            
            最大的定义, 是正数就加, 是负数就避免
            
            那么就成了遍历数组,求前面i - 1] 的最大值, 加上 nums[i]
            如果是负数, 前面的就不加了
            如果是正数, 就加上当前的(如果因为自己结尾是负的就不加,就成了 dp[i - 1], 也失去了连续性)
            
            dp[i], 以nums[i]为结尾的数组最大值
            dp[i] = Math.min(dp[i - 1] + nums[i], nums[i]);
            初始化dp[i]
     * mis:
     *     
     * fol:152. Maximum Product Subarray
     * oth:https://www.jianshu.com/p/9381d2257af3
     */
    public int maxSubArray(int[] nums) {
        // 前缀和数组
        // 区间的和 = 区间尾巴 - 区间头???
        if (nums == null || nums.length == 0) {
            return 0;
        }
        int[] currentMax = new int[nums.length + 1];
        int max = Integer.MIN_VALUE;
        
        for (int i = 1; i < nums.length + 1; i++){
            currentMax[i] = Math.max(currentMax[i - 1] + nums[i - 1], nums[i - 1]);
            max = Math.max(currentMax[i], max);
        }
        return max;
    }
}
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
