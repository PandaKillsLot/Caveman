public class Solution {
    /**
     * @param nums: An array of non-negative integers.
     * @return: The maximum amount of money you can rob tonight
     */
/*
* 534. House Robber II
* https://www.lintcode.com/problem/house-robber-ii/description
* pro: 不能偷连着的两个, 求最大值(头尾连着)
* tag: dp 
* sol: 循环数组: 分裂, 重复(double size就够了)
*      ① dp[i] = 当前偷的最多
*      ② dp[i] = 自己加前一个,  res[i] = Math.max(res[i-1], res[i-2] + A[i-1]);
*      ③ 初始化: 
*      ④ 计算顺序:n
* 
*      Space O()
*      Time  O()
* 
* mis:  
* fol:
* oth:
*/
    public int houseRobber2(int[] nums) {
        // write your code here
        if (nums == null || nums.length < 1){
            return 0;
        }
        if (nums.length == 1){
            return nums[0];
        }
        return Math.max(houseRobber(nums, 0, nums.length - 2), houseRobber(nums, 1, nums.length - 1));
    }
    public int houseRobber(int[] A, int start, int end) {
        // write your code here
        int n = end - start + 1;
        if(n == 0)
            return 0;
        int[]res = new int[n + 1];
        
        
        res[0] = 0;
        res[1] = A[start];
        for(int i = 2; i <= n; i++) {
            // caution --> add start !
            // mistake:res[i] = Math.max(res[i-1], res[i-2] + A[i-1]);
            res[i] = Math.max(res[i-1], res[i-2] + A[start + i-1]);
        }
        return res[n];
    }
}
