class Solution {
    public void gameOfLife(int[][] board) {
        // 2 live to dead
        // 3 dead to live
        // 4 dead to dead
        // 5 live to live
        
        /**
         * 289. Game of Life
         * https://leetcode.com/problems/game-of-life/description/
         * pro: 细胞自动机,根据邻居 update自己.切记,,所有邻居是根据上一轮情况update,而不是updated之后的
         * tag: 优化
         * sol: 把四种状态记录下? 四种? 你要知道原来是活的死的,后来是活的死的
         * mis: 思路想不清楚瞎写
         *     
         * fol:
         * oth:
         */
        
        
        
        
        
        if (board == null || board.length == 0 || board[0].length == 0){
            return;
        }
        
        for (int i = 0; i < board.length; i++){
            for (int j = 0; j < board[0].length; j++){
                board[i][j] = getState(i, j, board);
            } 
        }
        for (int i = 0; i < board.length; i++){
            for (int j = 0; j < board[0].length; j++){
                board[i][j] = board[i][j] % 2;
            } 
        }
    }
    private int getState(int i, int j, int[][] board){
        
        int count = 0;
        int[] dx = {1, 0, -1, 0, 1, -1, 1, -1};
        int[] dy = {0, 1, 0, -1, 1, -1, -1, 1};
        
        for (int k = 0; k < 8; k++){
            int row = i + dx[k];
            int col = j + dy[k];
            
            if (row < 0 || row >= board.length || col < 0 || col >= board[0].length){
                continue;
            }
            if (board[row][col] == 2 || board[row][col] == 5 || board[row][col] == 1){// between two states
                count++;
            }
        }
        int state = 4;
        if (board[i][j] % 2 == 1){
            if (count == 2 || count == 3){
                state = 5;
            } else {
                state = 2;
            }
        } else {
            if (count == 3){
                state = 3;
            }
        }
        // System.out.println("i " + i + " j " + j + " ? " + state);
        return state;
    }
}
